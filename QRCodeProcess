Processus pour générer un code QR:

1) Créer un objet QRCodeWriter --> QRCodeWriter qrCodeWriter = new QRCodeWriter();

Cet objet est utilisé pour encoder les données d'entrée (la chaîne de caractères à convertir en QR code).

2) Générer le QR Code (BitMatrix) --> BitMatrix bitMatrix = qrCodeWriter.encode(data, BarcodeFormat.QR_CODE, width, height);

La méthode encode de QRCodeWriter prend les données et les dimensions souhaitées (largeur et hauteur), et retourne un BitMatrix. 
Cette matrice représente le code QR sous forme de pixels noirs et blancs. Elle contient essentiellement l'image du QR code sous forme de grille 2D.

3) Créer un objet de chemin de fichier --> Path path = FileSystems.getDefault().getPath(filePath);

La méthode getPath(filePath) convertit la chaîne de caractères filePath en un objet Path, utilisé pour manipuler le chemin du fichier de manière plus flexible.

4) Écrire le BitMatrix dans un fichier image --> MatrixToImageWriter.writeToPath(bitMatrix, "PNG", path);

La classe MatrixToImageWriter prend le BitMatrix (les données du QR code) et le convertit en un format d'image. Ici, nous spécifions "PNG" comme format de sortie et utilisons le path pour déterminer où enregistrer l'image.

5) Gérer les exceptions : 
La méthode enveloppe l'ensemble du processus de génération du QR code dans un bloc try-catch pour gérer les exceptions qui pourraient survenir.
- WriterException est capturée si la génération du QR code échoue (par exemple, si les données fournies ne sont pas valides pour l'encodage du QR code).
- IOException est capturée s'il y a un problème pour enregistrer l'image à l'emplacement spécifié (par exemple, des problèmes de permission ou de chemin de fichier invalide).

6) Enregistrer le résultat : Après que le QR code ait été généré et enregistré avec succès, un message de confirmation est affiché:
--> System.out.println("QR Code généré et enregistré à : " + filePath);

Cela permet de fournir un retour sur l'emplacement du fichier où le QR code a été enregistré.
